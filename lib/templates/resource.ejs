<%
var singularName  = resource.name,
    pluralName    = plural(singularName),
    formatComment = function formatComment(text, indentation) {
        var indent = Array(indentation + 1).join(" ");
        return text.trim().split("\n").map(function(line) {
            return indent + (line.length > 0 ? "# " : "#") + line;
        }).join("\n");
    }

function Action(action) {
    var that = this;
    this.action = action
    this.requiresData = action.method == "POST" || action.method == "PUT"
    this.isInstanceAction = action.method == "PUT" || action.method == "DELETE"
    this.methodName = snake(action.name)
    this.clientMethod = action.method.toLowerCase()

    // Params and idParams
    var params = action.params || []
    this.idParams = _.filter(params, function(p) { return p.type == "Id" })
    if (this.idParams.length == 1 &&
        action.path.match(/%d/) &&
        (action.name.match(/Id/) || this.isInstanceAction)) {
        var mainIdParam = this.idParams[0]
        this.mainIdParam = mainIdParam
        this.params = _.reject(params, function(p) { return p.name == mainIdParam.name })
    } else {
        this.params = params
    }

    // Endpoint path
    this.path = _.reduce(this.idParams, function(acc, id) {
        var localName = that.mainIdParam == id ? "id" : id.name
        return acc.replace("\%d", "#{" + localName + "}")
    }, action.path)

    // Extra params to be passed in the body of the call
    this.extraParams = _.reject(params, function(p) {
        return (that.path.match(new RegExp("#{" + p.name + "}")) ||
            (that.mainIdParam && that.path.match(new RegExp("#{id}"))))
    })

    // Params processing
    var paramsLocal = "data"
    if (this.extraParams.length > 0) {
        var paramNames = _.map(this.extraParams, function(p) { return p.name + ": " + p.name })
        if (this.requiresData) {
            var paramsProcessing = "with_params = data.merge(" + paramNames.join(", ") + ")"
            paramsLocal = "with_params"
        } else {
            var paramsProcessing = "params = { " + paramNames.join(", ") + " }"
            paramsLocal = "params";
        }
        paramsProcessing += ".reject { |_,v| v.nil? }";
    }
    this.paramsProcessing = paramsProcessing
    this.paramsLocal      = paramsLocal

    // Method argument names
    var argumentNames = Array()
    if (!this.isInstanceAction) { argumentNames.push("client") }
    if (this.mainIdParam !== undefined && !this.isInstanceAction) { argumentNames.push("id") }
    _.forEach(this.params, function(param) {
        argumentNames.push(param.name + ":" + (param.required ? "" : " nil"))
    })
    if (this.requiresData)          { argumentNames.push("**data") }
    this.argumentNames = argumentNames

    // API request params
    var requestParams = Array();
    requestParams.push('"' + this.path + '"');
    if (this.paramsProcessing || this.argumentNames.indexOf("**data") != -1) {
        var argument = this.requiresData ? "body" : "params";
        requestParams.push(argument + ": " + paramsLocal);
    }
    this.requestParams = requestParams

    this.documentation = this.renderDocumentation()

    this.constructor = action.collection ? "Collection.new" : "new"
}

Action.prototype.renderDocumentation = function () {
    var formatParamNotes = function(params) {
        var trimmed = _.flatten(_.map(params, function(p) {
            return _.map(p.notes, function(note) { return note.trim() })
        }));
        return (trimmed.length > 0 ? "\nNotes:\n\n" + trimmed.join("\n\n") : "");
    }

    var formatParam = function(p, name) {
        return (name !== undefined ? name : p.name) + " - [" + p.type + "] " + p.comment
    }
    var lines = _.map(this.params, function(p) { return formatParam(p) })
    if (this.mainIdParam !== undefined && !this.isInstanceAction) { lines.unshift(formatParam(this.mainIdParam, "id")) };
    if (this.requiresData) { lines.unshift("data - [Hash] the attributes to post.") }
    return this.action.comment + "\n" + lines.join("\n") + formatParamNotes(this.params);
}

var classActions = _.map(_.filter(resource.actions, function(action) {
        return action.method == "POST" || action.method == "GET"
    }), function(action) { return new Action(action) }),
    instanceActions = _.map(_.filter(resource.actions, function(action) {
        return action.method == "PUT" || action.method == "DELETE"
    }), function(action) { return new Action(action) })

%>### WARNING: This file is auto-generated by the asana-api-meta repo. Do not
### edit it manually.

module Asana
  module Resources
<%= formatComment(resource.comment, 4) %>
    class <%= cap(singularName) %> < Resource
<% _.forEach(resource.properties, function(property) { %>
      attr_reader :<%= property.name %>
<% }) %>
      class << self
        # Returns the plural name of the resource.
        def plural_name
          '<%= pluralName %>'
        end
<% _.forEach(classActions, function(action) { %>
<%= formatComment(action.documentation, 8) %>
        def <%= action.methodName %>(<%= action.argumentNames.join(", ") %>)
<% if (action.paramsProcessing) { %>          <%= action.paramsProcessing %><% } %>
          <%= action.constructor %>(body(client.<%= action.clientMethod %>(<%= action.requestParams.join(", ") %>)), client: client)
        end
<% }) %>      end
<% _.forEach(instanceActions, function(action) { %>
<%= formatComment(action.documentation, 6) %>
      def <%= action.methodName %>(<%= action.argumentNames.join(", ") %>)
<% if (action.clientMethod == "delete") { %>        client.delete("<%= action.path %>") && true
<% } else { %>        refresh_with(body(client.put("<%= action.path %>", body: data)))<% } %>
      end
<% }) %>
    end
  end
end


