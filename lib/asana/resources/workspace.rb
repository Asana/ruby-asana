### WARNING: This file is auto-generated by the asana-api-meta repo. Do not
### edit it manually.

module Asana
  module Resources
    # A _workspace_ is the highest-level organizational unit in Asana. All projects
    # and tasks have an associated workspace.
    #
    # An _organization_ is a special kind of workspace that represents a company.
    # In an organization, you can group your projects into teams. You can read
    # more about how organizations work on the Asana Guide.
    # To tell if your workspace is an organization or not, check its
    # `is_organization` property.
    #
    # Over time, we intend to migrate most workspaces into organizations and to
    # release more organization-specific functionality. We may eventually deprecate
    # using workspace-based APIs for organizations. Currently, and until after
    # some reasonable grace period following any further announcements, you can
    # still reference organizations in any `workspace` parameter.
    class Workspace < Resource

      attr_reader :id

      attr_reader :name

      attr_reader :is_organization

      class << self
        # Returns the plural name of the resource.
        def plural_name
          'workspaces'
        end

        # Returns the full workspace record for a single workspace.
        #
        # id - [Id] Globally unique identifier for the workspace or organization.
        def find_by_id(client, id)

          new(body(client.get("/workspaces/#{id}")), client: client)
        end

        # Returns the compact records for all workspaces visible to the authorized user.
        def find_all(client)

          Collection.new(body(client.get("/workspaces")).map { |data| new(data, client: client) }, client: client)
        end

        # Retrieves objects in the workspace based on an auto-completion/typeahead
        # search algorithm. This feature is meant to provide results quickly, so do
        # not rely on this API to provide extremely accurate search results. The
        # result set is limited to a single page of results with a maximum size,
        # so you won't be able to fetch large numbers of results.
        #
        # workspace - [Id] The workspace to fetch objects from.
        # type - [Enum] The type of values the typeahead should return.
        # Note that unlike in the names of endpoints, the types listed here are
        # in singular form (e.g. `task`). Using multiple types is not yet supported.
        #
        # query - [String] The string that will be used to search for relevant objects. If an
        # empty string is passed in, the API will currently return an empty
        # result set.
        #
        # count - [Number] The number of results to return. The default is `20` if this
        # parameter is omitted, with a minimum of `1` and a maximum of `100`.
        # If there are fewer results found than requested, all will be returned.
        def typeahead(client, workspace:, type:, query: nil, count: nil)
          params = { type: type, query: query, count: count }.reject { |_,v| v.nil? }
          Collection.new(body(client.get("/workspaces/#{workspace}/typeahead", params: params)).map { |data| Resource.new(data, client: client) }, client: client)
        end
      end

      # Update properties on a workspace. Returns the complete, updated workspace record.
      #
      # data - [Hash] the attributes to post.
      def update(**data)
        refresh_with(body(client.put("/workspaces/#{id}", body: data)))
      end

    end
  end
end
